# 构建 VitePress 站点并将其部署到 GitHub Pages 的示例工作流程
name: Deploy VitePress site to Pages

on:
  # 每当 push 到 main 分支时触发部署
  push:
    branches: main
    # 只在下列路径变更时触发
    # paths:
    #     - 'docs/**'
    #     - 'package.json'
    #     - '.github/**'
    # # 允许你从 Actions 选项卡手动部署此工作流程
  workflow_dispatch:

# 设置 GITHUB_TOKEN 的权限，以允许部署到 GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
    
# 只允许同时进行一次部署，跳过正在运行和最新队列之间的运行队列
# 但是，不要取消正在进行的运行，因为我们希望允许这些生产部署完成
concurrency:
  group: pages
  cancel-in-progress: false

jobs:
  # 构建工作
  build:
    runs-on: ubuntu-latest
    steps:
      # 拉取代码
      - name: Checkout
        uses: actions/checkout@v4
        with:
            # “最近更新时间” 等 git 日志相关信息，需要拉取全部提交记录  如果未启用 lastUpdated，则不需要
            fetch-depth: 0

        # 安装 pnpm
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
            version: 8

        # 设置 node 版本
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
            node-version: 20
            cache: pnpm # or pnpm / yarn

        #此操作有助于支持从任何静态站点生成器部署到 GitHub Pages
      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Install dependencies
        run:  pnpm install

        # 打包静态文件
      - name: Build with VitePress
        run:  pnpm run docs:build
        env:
            DOC_ENV: production

      #此操作有助于支持从任何静态站点生成器部署到 GitHub Pages
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
            path: docs/.vitepress/dist
            
  # 发布
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4